<?php
/** Bitcoin Bank plugin for WordPress.
 *
 *  Copyright (C) 2021 Arild Hegvik
 *
 *  GNU GENERAL PUBLIC LICENSE (GNU GPLv3)
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @package Bitcoin-Bank
 */

namespace BCQ_BitcoinBank;

defined('ABSPATH') || exit;

use WP_PluginFramework\DataTypes\String_Type;
use WP_PluginFramework\Utils\Security_Filter;
use WP_PluginFramework\HtmlComponents\Status_Bar;
use WP_PluginFramework\HtmlElements\Strong;
use WP_PluginFramework\Utils\Debug_Logger;

/**
 * Summary.
 *
 * Description.
 */
class Cheque_Send_Controller extends Cheque_Controller
{
    /** @var Cheque_Send_View */
    public $view;

    public function __construct( $cheque_id = null, $access_code = null, $view_class=null ) {
        $model_class = 'BCQ_BitcoinBank\Clients_Db_Table';
        if( ! isset($view_class)){
            $view_class = 'BCQ_BitcoinBank\Cheque_Send_View';
        }

        parent::__construct( $cheque_id, $access_code, $view_class );
    }

    protected function load_model_values( $values = array() ) {
        if ( $this->cheque_id ) {
            $this->model->load_data_id($this->cheque_id);
        }
        return $values;
    }

    protected function draw_view($parameters = null)
    {
        $parameters = array();

        if ( $this->cheque_id )
        {
            $result = $this->model->load_data_id($this->cheque_id);
            if ($result !== false)
            {
                if (is_admin())
                {
                    $data_in_array = $this->model->get_all_data_objects();
                    $data_objects = $data_in_array[0];

                    $wp_current_user = wp_get_current_user();
                    $data_objects['first_name'] = new String_Type(null, null, $wp_current_user->first_name);
                    $data_objects['first_name']->set_property('label', 'First name');

                    $data_objects['last_name'] = new String_Type(null, null, $wp_current_user->last_name);
                    $data_objects['last_name']->set_property('label', 'Last name');

                    $data_objects['email'] = new String_Type(null, null, $wp_current_user->email);
                    $data_objects['email']->set_property('label', 'E-mail');

                    $parameters['data_objects'] = $data_objects;

                }
                else
                {
                    $columns = array(
                        Clients_Db_Table::PRIMARY_KEY,
                        Clients_Db_Table::MONEY_ADDRESS
                    );

                    $data_in_array = $this->model->get_all_data_objects($columns);
                    $data_objects = $data_in_array[0];

                    $parameters['data_objects'] = $data_objects;
                }

                $parameters['status'] = true;
            }
            else
            {
                $parameters['status'] = false;
            }
        }

        return parent::draw_view($parameters); // TODO: Change the autogenerated stub
    }

    public function button_send_cheque_click()
    {
        $this->hide_input_error_indications();

        if (is_user_logged_in())
        {
            $input_data_ok = true;
            $message = '';

            $receiver_email = $this->view->email->get_text();
            if ( ! $receiver_email )
            {
                $this->response_set_input_error( 'email' );
                $message .= "No e-mail. ";
                $input_data_ok = false;
            }

            $receiver_email = filter_var( $receiver_email, FILTER_VALIDATE_EMAIL );

            $amount_txt = $this->view->amount->get_text();
            if( ! $amount_txt )
            {
                $this->response_set_input_error( 'amount' );
                $message .= "No amount value. ";
                $input_data_ok = false;
            }

            $amount = Crypto_currency_type::convert_str_to_value($amount_txt);

            if ( $input_data_ok )
            {
                if ($amount === false)
                {
                    $this->response_set_input_error('amount');
                    $message .= 'Invalid characters in amount.';
                    $input_data_ok = false;
                }
            }

            if ( $input_data_ok )
            {
                if ($amount < 0)
                {
                    $this->response_set_input_error('amount');
                    $message .= 'Can not send negative amount.';
                    $input_data_ok = false;
                }
            }

            if ( $input_data_ok )
            {
                if ($amount == 0)
                {
                    $this->response_set_input_error('amount');
                    $message .= 'Enter amount value to send.';
                    $input_data_ok = false;
                }
            }

            if ( $input_data_ok )
            {
                $wp_user_id = get_current_user_id();
                $client_id = Accounting::get_client_id($wp_user_id);
                $account_id = Accounting::get_client_default_account($client_id);
                $balance = Accounting::get_account_balance($account_id);
                $cheque_fee = Cheque_Handler::get_cheque_fee();
                $total_pay = $amount + $cheque_fee;

                if( $total_pay > $balance ) {
                    $this->response_set_input_error('amount');
                    $message .= 'Not enough funds.';
                    $input_data_ok = false;
                }
            }

            if ( $input_data_ok )
            {
                $memo = $this->view->memo->get_text();
                if ( strlen($memo) > 50 ) {
                    $message .= 'Memo can be maximum 50 characters.';
                    $input_data_ok = false;
                }
            }
            if ( $input_data_ok )
            {
                $expire = $this->view->expire->get_selected();
                switch( $expire ) {
                    case 'five_minutes':
                        $expire_seconds = 5*60;
                        break;
                    case 'thirty_minutes':
                        $expire_seconds = 30*60;
                        break;
                    case 'one_hour':
                        $expire_seconds = 3600;
                        break;
                    case 'two_hour':
                        $expire_seconds = 2*3600;
                        break;
                    case 'tree_hour':
                        $expire_seconds = 3*3600;
                        break;
                    case 'six_hour':
                        $expire_seconds = 6*3600;
                        break;
                    case 'half_day':
                        $expire_seconds = 12*3600;
                        break;
                    case 'one_day':
                        $expire_seconds = 24*3600;
                        break;
                    case 'two_days':
                        $expire_seconds = 2*24*3600;
                        break;
                    case 'tree_days':
                        $expire_seconds = 3*24*3600;
                        break;
                    case 'five_days':
                        $expire_seconds = 5*24*3600;
                        break;
                    case 'one_week':
                        $expire_seconds = 7*24*3600;
                        break;
                    case 'two_weeks':
                        $expire_seconds = 14*24*3600;
                        break;
                    default:
                        $message .= 'Error. Expire option not availeble.';
                        $input_data_ok = false;
                        break;
                }
            }

            if ( $input_data_ok )
            {
                $sender_address = Accounting::get_client_money_address($client_id);
                $expire_time = time() + $expire_seconds;
                $pay_fee = true;

                $cheque_id = Cheque_Handler::make_cheque_transaction(
                    $account_id,
                    $amount,
                    $sender_address,
                    $receiver_email,
                    $expire_time,
                    $memo,
                    $pay_fee
                );
                if( $cheque_id === false ) {
                    $message .= 'Error. Could not make transaction.';
                    $input_data_ok = false;
                }
            }

            if ( $input_data_ok )
            {
                $cheque_data = new Cheque_Db_Table();
                $cheque_data->load_data_id($cheque_id);
                $access_code = $cheque_data->get_data(Cheque_Db_Table::ACCESS_CODE);

                //$input_data_ok = $this->send_email_cheque($email, $cheque_id, $access_code, "Test", "This is a test cheque.");
                $input_data_ok = Cheque_Handler::send_email_cheque($receiver_email, $cheque_id, $access_code, "Test", $memo);
            }

            if ( $input_data_ok ) {
                $message = "Cheque send successfully.";
                $values = array(
                    'cheque_id' => $cheque_id,
                    'access_code' => $access_code,
                    'message' => $message
                );
                $this->reload_view('BCQ_BitcoinBank\Cheque_Sent_Receipt_View', false, $values);
                //$this->view->status_bar_footer->set_status_text($message, Status_Bar::STATUS_SUCCESS);
            } else {
                if ( ! $message ) {
                  $message = "Undefined error.";
                }
                $this->view->status_bar_footer->set_status_text($message, Status_Bar::STATUS_ERROR);
            }
        }
        else
        {
            $message = "Not logged in.";
            $this->view->status_bar_footer->set_status_text($message, Status_Bar::STATUS_ERROR);

        }

        $this->show_onput_error_indications();
    }
}
